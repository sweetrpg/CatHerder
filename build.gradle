buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { // PARCHMENT
            url = "https://maven.parchmentmc.org"
        }
        gradlePluginPortal()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.0.+', changing: true
        classpath "gradle.plugin.se.bjurr.gitchangelog:git-changelog-gradle-plugin:1.71.4"
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
        classpath "org.ajoberstar.grgit:grgit-gradle:4.1.0"
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'se.bjurr.gitchangelog.git-changelog-gradle-plugin'
apply plugin: 'org.ajoberstar.grgit'

def branch = grgit.branch.current()
println "On branch: ${branch.fullName}"
println "Pipeline branch: " + (System.getenv('CI_COMMIT_BRANCH') ?: 'NONE')

group = 'com.sweetrpg'
archivesBaseName = "CatHerder-${project.target_mc_version}"
//version = (grgit.describe(longDescr: true, tags: true) ?: '0-0-0').split('-').with { it -> "${it[0]}.${it[1]}" }
version = System.getenv("CATHERDER_VERSION") ?: new File(".VERSION").text.trim()

println "Version: ${version}"
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

sourceSets {
    api
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        resources.srcDirs += 'src/generated/resources'
    }
    test {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
}

configurations {
    apiImplementation.extendsFrom(implementation)
    apiRuntimeOnly.extendsFrom(runtimeOnly)
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

repositories {
    maven {
        url "https://dvs1.progwml6.com/files/maven"
        content { includeGroup "mezz.jei" }
    }
    maven {
        url "https://modmaven.k-4u.nl"
        content { includeGroup "mezz.jei" }
    }
    maven { // JEI
        url "https://dvs1.progwml6.com/files/maven"
    }
    maven { // The One Probe
        url "https://cursemaven.com"
    }
    maven { url 'https://maven.blamejared.com' }
}

minecraft {
//    mappings channel: project.mcp_channel, version: project.mcp_mappings
    mappings channel: 'parchment', version: project.parchment_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            taskName 'catherder_client'
            workingDirectory file('run')
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                catherder.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
            }
        }

        server {
            taskName 'catherder_server'
            workingDirectory file('run-server')
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                catherder.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
            }
        }

        data {
            taskName 'catherder_data'
            workingDirectory file('run')
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args '--mod', 'catherder', '--all', '--output', '"' + file('src/generated/resources/') + '"', '--existing', '"' + sourceSets.main.resources.srcDirs[0] + '"'
            mods {
                catherder.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.forge_version}"

    compileOnly fg.deobf("mezz.jei:jei-${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_version}")
    // runtimeOnly fg.deobf("curse.maven:doggytalents-271050:${dt_file_id}")
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${ptch_version}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${ptch_version}")
//    implementation fg.deobf("curse.maven:farmers-delight-398521:3615366")

    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.8.1")
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.8.1")

    implementation fg.deobf("curse.maven:the-one-probe-245211:${top_file_id}")
}

task sourcesJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveClassifier = 'sources'
    from sourceSets.main.allJava
    from sourceSets.api.allJava
}

task apiJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveClassifier = 'api'
    from sourceSets.api.output
    from sourceSets.api.allJava
}

artifacts {
    archives sourcesJar
    archives apiJar
}

def replaceResources = tasks.register('replaceResources', Copy) {
    it.outputs.upToDateWhen { false }
    it.from(sourceSets.main.resources) {
        include 'META-INF/mods.toml'
        expand([
            'version': project.version,
            'minecraft_version_range': project.minecraft_version_range,
            'forge_version_range': project.forge_version_range,
            'fml_version_range': project.fml_version_range,
        ])
    }
    it.into "$buildDir/resources/main/"
}

processResources {
    duplicatesStrategy(DuplicatesStrategy.INCLUDE) // .FAIL
    exclude('META-INF/mods.toml')
    configure { finalizedBy(replaceResources) }
}

classes.configure {
    dependsOn(replaceResources)
}

jar {
    from sourceSets.main.output
    from sourceSets.api.output

    manifest {
        attributes([
            "Specification-Title": "Cat Herder",
            "Specification-Vendor": "SweetRPG",
            "Specification-Version": project.version, // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Implementation-Vendor" :"SweetRPG",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

test {
    useJUnitPlatform()
}

task makeChangelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    file = new File("build/changelog.md")
    fromRepo = file(".")
    untaggedName = "Current release ${project.version}"
    fromCommit = new File(".RELEASE_HASH").text.trim()
    toRef = 'HEAD'

    templateContent = file('changelog.mustache').getText('UTF-8')
}

curseforge {
    apiKey = System.getenv('CURSEFORGE_API_KEY') ?: 0
    project {
        id = project.curseforge_project_id
        changelog = file("build/changelog.md")
        changelogType = 'markdown'
        releaseType = findProperty("curseforge_release_type") ?: 'beta'
        addGameVersion project.target_mc_version
        for (String v : project.additional_mc_versions.split(',')) {
            if (v) {
                addGameVersion v
            }
        }
        addArtifact apiJar
    }
    options {
        detectNewerJava = true
    }
}

// Must be done in afterEvaluate as the specific curseforge$id
// task is generated lazily
afterEvaluate {
    tasks.named("curseforge${project.curseforge_project_id}").get().dependsOn.add(makeChangelog)
}

if (project.hasProperty('UPDATE_MAPPINGS')) {
    extractRangeMap {
        sources sourceSets.api.java.srcDirs
    }
    applyRangeMap {
        sources sourceSets.api.java.srcDirs
    }
    sourceSets.api.java.srcDirs.each { extractMappedNew.addTarget it }
}
